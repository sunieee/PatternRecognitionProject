{"env_info": "sys.platform: linux\nPython: 3.9.13 (main, Oct 13 2022, 21:15:33) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr\nNVCC: Cuda compilation tools, release 11.5, V11.5.119\nGCC: gcc (conda-forge gcc 13.2.0-7) 13.2.0\nPyTorch: 2.1.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201703\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.8\n  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.7\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.16.1\nOpenCV: 4.10.0\nMMCV: 1.7.2\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.8\nMMRotate: 0.3.4+8117d56", "config": "dataset_type = 'DOTADataset'\ndata_root = 'data/'\nclasses = ('Airplane', )\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='RResize', img_scale=(1024, 1024)),\n    dict(\n        type='RRandomFlip',\n        flip_ratio=[0.25, 0.25, 0.25],\n        direction=['horizontal', 'vertical', 'diagonal'],\n        version='le90'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='RResize'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DOTADataset',\n        classes=('Airplane', ),\n        ann_file='data/train_val/train_coco_ann.json',\n        img_prefix='data/train_val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='RResize', img_scale=(1024, 1024)),\n            dict(\n                type='RRandomFlip',\n                flip_ratio=[0.25, 0.25, 0.25],\n                direction=['horizontal', 'vertical', 'diagonal'],\n                version='le90'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        version='le90'),\n    val=dict(\n        type='DOTADataset',\n        classes=('Airplane', ),\n        ann_file='data/train_val/val_coco_ann.json',\n        img_prefix='data/train_val/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='le90'),\n    test=dict(\n        type='DOTADataset',\n        classes=('Airplane', ),\n        ann_file='data/test/test_coco_ann.json',\n        img_prefix='data/test/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='le90'))\nevaluation = dict(interval=1, metric='mAP')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nangle_version = 'le90'\nmodel = dict(\n    type='OrientedRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='OrientedRPNHead',\n        in_channels=256,\n        feat_channels=256,\n        version='le90',\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='MidpointOffsetCoder',\n            angle_range='le90',\n            target_means=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0, 0.5, 0.5]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='OrientedStandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='RotatedSingleRoIExtractor',\n            roi_layer=dict(\n                type='RoIAlignRotated',\n                out_size=7,\n                sample_num=2,\n                clockwise=True),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='RotatedShared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHAOBBoxCoder',\n                angle_range='le90',\n                norm_factor=None,\n                edge_swap=True,\n                proj_xy=True,\n                target_means=(0.0, 0.0, 0.0, 0.0, 0.0),\n                target_stds=(0.1, 0.1, 0.2, 0.2, 0.1)),\n            reg_class_agnostic=True,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.8),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                iou_calculator=dict(type='RBboxOverlaps2D'),\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RRandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.8),\n            min_bbox_size=0),\n        rcnn=dict(\n            nms_pre=2000,\n            min_bbox_size=0,\n            score_thr=0.05,\n            nms=dict(iou_thr=0.1),\n            max_per_img=2000)))\nwork_dir = 'work_dirs/train'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 411049182, "exp_name": "oriented_rcnn_r50_fpn_1x_dota_le90.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00199, "memory": 3284, "data_time": 0.04931, "loss_rpn_cls": 0.38858, "loss_rpn_bbox": 0.05415, "loss_cls": 0.10067, "acc": 97.81836, "loss_bbox": 0.02946, "loss": 0.57285, "grad_norm": 4.49248, "time": 0.25964}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00233, "memory": 3284, "data_time": 0.00527, "loss_rpn_cls": 0.09346, "loss_rpn_bbox": 0.0559, "loss_cls": 0.1371, "acc": 94.45703, "loss_bbox": 0.22149, "loss": 0.50795, "grad_norm": 4.81871, "time": 0.18041}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00266, "memory": 3284, "data_time": 0.00536, "loss_rpn_cls": 0.06251, "loss_rpn_bbox": 0.04899, "loss_cls": 0.1575, "acc": 93.54883, "loss_bbox": 0.29999, "loss": 0.569, "grad_norm": 4.50365, "time": 0.1776}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00299, "memory": 3284, "data_time": 0.00436, "loss_rpn_cls": 0.0434, "loss_rpn_bbox": 0.05459, "loss_cls": 0.1384, "acc": 94.46094, "loss_bbox": 0.34038, "loss": 0.57678, "grad_norm": 4.56616, "time": 0.17364}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00333, "memory": 3284, "data_time": 0.00459, "loss_rpn_cls": 0.03652, "loss_rpn_bbox": 0.06349, "loss_cls": 0.11324, "acc": 95.3418, "loss_bbox": 0.34096, "loss": 0.55421, "grad_norm": 4.20912, "time": 0.17581}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00396, "memory": 3286, "data_time": 0.05004, "loss_rpn_cls": 0.02419, "loss_rpn_bbox": 0.04147, "loss_cls": 0.08924, "acc": 96.33789, "loss_bbox": 0.26659, "loss": 0.42149, "grad_norm": 3.48692, "time": 0.22134}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00429, "memory": 3286, "data_time": 0.00495, "loss_rpn_cls": 0.02058, "loss_rpn_bbox": 0.04282, "loss_cls": 0.0896, "acc": 96.42773, "loss_bbox": 0.28467, "loss": 0.43766, "grad_norm": 3.36614, "time": 0.17592}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00463, "memory": 3286, "data_time": 0.00474, "loss_rpn_cls": 0.01944, "loss_rpn_bbox": 0.03271, "loss_cls": 0.07963, "acc": 96.73828, "loss_bbox": 0.24722, "loss": 0.37899, "grad_norm": 2.97909, "time": 0.17839}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00496, "memory": 3286, "data_time": 0.00496, "loss_rpn_cls": 0.01669, "loss_rpn_bbox": 0.03952, "loss_cls": 0.08659, "acc": 96.54883, "loss_bbox": 0.25134, "loss": 0.39415, "grad_norm": 3.49724, "time": 0.17825}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.005, "memory": 3286, "data_time": 0.00495, "loss_rpn_cls": 0.01833, "loss_rpn_bbox": 0.04847, "loss_cls": 0.10428, "acc": 95.73828, "loss_bbox": 0.30488, "loss": 0.47595, "grad_norm": 3.69237, "time": 0.17788}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.005, "memory": 3286, "data_time": 0.05026, "loss_rpn_cls": 0.01607, "loss_rpn_bbox": 0.02827, "loss_cls": 0.07383, "acc": 97.03906, "loss_bbox": 0.20814, "loss": 0.32631, "grad_norm": 2.67956, "time": 0.22217}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.005, "memory": 3286, "data_time": 0.00444, "loss_rpn_cls": 0.01443, "loss_rpn_bbox": 0.03036, "loss_cls": 0.07192, "acc": 97.14648, "loss_bbox": 0.18642, "loss": 0.30314, "grad_norm": 2.56802, "time": 0.17455}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.005, "memory": 3286, "data_time": 0.00468, "loss_rpn_cls": 0.01185, "loss_rpn_bbox": 0.02576, "loss_cls": 0.07007, "acc": 97.20508, "loss_bbox": 0.16456, "loss": 0.27224, "grad_norm": 2.56865, "time": 0.17553}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.005, "memory": 3286, "data_time": 0.00476, "loss_rpn_cls": 0.01013, "loss_rpn_bbox": 0.02561, "loss_cls": 0.0684, "acc": 97.16602, "loss_bbox": 0.15384, "loss": 0.25798, "grad_norm": 2.58397, "time": 0.17535}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.005, "memory": 3286, "data_time": 0.00499, "loss_rpn_cls": 0.01129, "loss_rpn_bbox": 0.03244, "loss_cls": 0.07766, "acc": 96.88477, "loss_bbox": 0.18394, "loss": 0.30533, "grad_norm": 2.80806, "time": 0.17548}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.005, "memory": 3286, "data_time": 0.05099, "loss_rpn_cls": 0.01127, "loss_rpn_bbox": 0.02164, "loss_cls": 0.06295, "acc": 97.47656, "loss_bbox": 0.13428, "loss": 0.23014, "grad_norm": 2.33917, "time": 0.22288}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.005, "memory": 3286, "data_time": 0.0051, "loss_rpn_cls": 0.01, "loss_rpn_bbox": 0.0235, "loss_cls": 0.06038, "acc": 97.64062, "loss_bbox": 0.12667, "loss": 0.22055, "grad_norm": 2.1148, "time": 0.17485}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.005, "memory": 3286, "data_time": 0.00446, "loss_rpn_cls": 0.0078, "loss_rpn_bbox": 0.01935, "loss_cls": 0.05774, "acc": 97.65625, "loss_bbox": 0.12207, "loss": 0.20696, "grad_norm": 2.07487, "time": 0.17214}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.005, "memory": 3286, "data_time": 0.00557, "loss_rpn_cls": 0.00697, "loss_rpn_bbox": 0.01842, "loss_cls": 0.06188, "acc": 97.51758, "loss_bbox": 0.10832, "loss": 0.19559, "grad_norm": 2.1568, "time": 0.17637}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.005, "memory": 3286, "data_time": 0.00499, "loss_rpn_cls": 0.00763, "loss_rpn_bbox": 0.02678, "loss_cls": 0.06431, "acc": 97.49609, "loss_bbox": 0.12879, "loss": 0.22752, "grad_norm": 2.13832, "time": 0.1768}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.005, "memory": 3286, "data_time": 0.05095, "loss_rpn_cls": 0.00704, "loss_rpn_bbox": 0.01668, "loss_cls": 0.05479, "acc": 97.78906, "loss_bbox": 0.10226, "loss": 0.18076, "grad_norm": 1.96791, "time": 0.22281}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.005, "memory": 3286, "data_time": 0.00556, "loss_rpn_cls": 0.00664, "loss_rpn_bbox": 0.01658, "loss_cls": 0.05443, "acc": 97.79102, "loss_bbox": 0.09136, "loss": 0.16901, "grad_norm": 1.89183, "time": 0.17914}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.005, "memory": 3286, "data_time": 0.00562, "loss_rpn_cls": 0.00623, "loss_rpn_bbox": 0.01625, "loss_cls": 0.05558, "acc": 97.73242, "loss_bbox": 0.10338, "loss": 0.18145, "grad_norm": 2.06402, "time": 0.17741}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.005, "memory": 3286, "data_time": 0.00456, "loss_rpn_cls": 0.00521, "loss_rpn_bbox": 0.01449, "loss_cls": 0.0548, "acc": 97.82422, "loss_bbox": 0.08633, "loss": 0.16084, "grad_norm": 2.00058, "time": 0.17428}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.005, "memory": 3286, "data_time": 0.00528, "loss_rpn_cls": 0.00622, "loss_rpn_bbox": 0.02349, "loss_cls": 0.06313, "acc": 97.53516, "loss_bbox": 0.10948, "loss": 0.20232, "grad_norm": 2.06834, "time": 0.17807}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.005, "memory": 3286, "data_time": 0.05069, "loss_rpn_cls": 0.00508, "loss_rpn_bbox": 0.01277, "loss_cls": 0.05309, "acc": 97.89844, "loss_bbox": 0.08345, "loss": 0.1544, "grad_norm": 1.85652, "time": 0.22256}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.005, "memory": 3286, "data_time": 0.00552, "loss_rpn_cls": 0.00511, "loss_rpn_bbox": 0.01304, "loss_cls": 0.0505, "acc": 97.94531, "loss_bbox": 0.0787, "loss": 0.14735, "grad_norm": 1.91153, "time": 0.17905}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.005, "memory": 3286, "data_time": 0.00467, "loss_rpn_cls": 0.0045, "loss_rpn_bbox": 0.01165, "loss_cls": 0.05183, "acc": 97.89258, "loss_bbox": 0.08206, "loss": 0.15005, "grad_norm": 1.82165, "time": 0.17404}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.005, "memory": 3286, "data_time": 0.00523, "loss_rpn_cls": 0.0042, "loss_rpn_bbox": 0.01364, "loss_cls": 0.05366, "acc": 97.84375, "loss_bbox": 0.07469, "loss": 0.14619, "grad_norm": 2.09517, "time": 0.17575}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.005, "memory": 3286, "data_time": 0.0049, "loss_rpn_cls": 0.00422, "loss_rpn_bbox": 0.01797, "loss_cls": 0.06417, "acc": 97.38086, "loss_bbox": 0.09422, "loss": 0.18058, "grad_norm": 2.11398, "time": 0.17563}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.005, "memory": 3286, "data_time": 0.05132, "loss_rpn_cls": 0.00422, "loss_rpn_bbox": 0.01221, "loss_cls": 0.05331, "acc": 97.94141, "loss_bbox": 0.08418, "loss": 0.15392, "grad_norm": 2.03516, "time": 0.22469}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.005, "memory": 3286, "data_time": 0.00518, "loss_rpn_cls": 0.0047, "loss_rpn_bbox": 0.01303, "loss_cls": 0.05007, "acc": 98.00195, "loss_bbox": 0.08297, "loss": 0.15077, "grad_norm": 2.12814, "time": 0.17709}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.005, "memory": 3286, "data_time": 0.00584, "loss_rpn_cls": 0.00387, "loss_rpn_bbox": 0.01161, "loss_cls": 0.05107, "acc": 97.90625, "loss_bbox": 0.08441, "loss": 0.15095, "grad_norm": 2.07193, "time": 0.17882}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.005, "memory": 3286, "data_time": 0.00548, "loss_rpn_cls": 0.0036, "loss_rpn_bbox": 0.01461, "loss_cls": 0.04866, "acc": 98.03125, "loss_bbox": 0.08392, "loss": 0.15079, "grad_norm": 2.1602, "time": 0.17758}
{"mode": "train", "epoch": 7, "iter": 250, "lr": 0.005, "memory": 3286, "data_time": 0.00546, "loss_rpn_cls": 0.00458, "loss_rpn_bbox": 0.02265, "loss_cls": 0.06148, "acc": 97.53906, "loss_bbox": 0.09909, "loss": 0.18781, "grad_norm": 2.30437, "time": 0.17708}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.005, "memory": 3286, "data_time": 0.05062, "loss_rpn_cls": 0.00415, "loss_rpn_bbox": 0.01311, "loss_cls": 0.05173, "acc": 97.90234, "loss_bbox": 0.08365, "loss": 0.15264, "grad_norm": 2.13683, "time": 0.22246}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.005, "memory": 3286, "data_time": 0.00495, "loss_rpn_cls": 0.00433, "loss_rpn_bbox": 0.0139, "loss_cls": 0.05239, "acc": 98.02539, "loss_bbox": 0.08108, "loss": 0.15169, "grad_norm": 2.02719, "time": 0.17784}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.005, "memory": 3286, "data_time": 0.00591, "loss_rpn_cls": 0.00377, "loss_rpn_bbox": 0.01225, "loss_cls": 0.05207, "acc": 97.92188, "loss_bbox": 0.08329, "loss": 0.15137, "grad_norm": 2.03437, "time": 0.17945}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.005, "memory": 3286, "data_time": 0.00584, "loss_rpn_cls": 0.00384, "loss_rpn_bbox": 0.01282, "loss_cls": 0.0474, "acc": 98.16211, "loss_bbox": 0.06019, "loss": 0.12424, "grad_norm": 1.70806, "time": 0.17654}
{"mode": "train", "epoch": 8, "iter": 250, "lr": 0.005, "memory": 3286, "data_time": 0.00441, "loss_rpn_cls": 0.00415, "loss_rpn_bbox": 0.02031, "loss_cls": 0.0567, "acc": 97.70312, "loss_bbox": 0.08483, "loss": 0.166, "grad_norm": 2.22946, "time": 0.17267}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.0005, "memory": 3286, "data_time": 0.05068, "loss_rpn_cls": 0.00264, "loss_rpn_bbox": 0.00936, "loss_cls": 0.04137, "acc": 98.37109, "loss_bbox": 0.065, "loss": 0.11838, "grad_norm": 1.57457, "time": 0.22115}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.0005, "memory": 3286, "data_time": 0.00475, "loss_rpn_cls": 0.0033, "loss_rpn_bbox": 0.00954, "loss_cls": 0.04353, "acc": 98.26953, "loss_bbox": 0.05541, "loss": 0.11177, "grad_norm": 1.41366, "time": 0.17332}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.0005, "memory": 3286, "data_time": 0.00529, "loss_rpn_cls": 0.00275, "loss_rpn_bbox": 0.00801, "loss_cls": 0.04126, "acc": 98.38867, "loss_bbox": 0.0579, "loss": 0.10993, "grad_norm": 1.40025, "time": 0.17584}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.0005, "memory": 3286, "data_time": 0.00444, "loss_rpn_cls": 0.00287, "loss_rpn_bbox": 0.00826, "loss_cls": 0.03879, "acc": 98.47266, "loss_bbox": 0.04856, "loss": 0.09849, "grad_norm": 1.28149, "time": 0.17623}
{"mode": "train", "epoch": 9, "iter": 250, "lr": 0.0005, "memory": 3286, "data_time": 0.00464, "loss_rpn_cls": 0.00311, "loss_rpn_bbox": 0.01119, "loss_cls": 0.04458, "acc": 98.23438, "loss_bbox": 0.06251, "loss": 0.12139, "grad_norm": 1.4845, "time": 0.17631}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.0005, "memory": 3286, "data_time": 0.05007, "loss_rpn_cls": 0.00203, "loss_rpn_bbox": 0.00688, "loss_cls": 0.03782, "acc": 98.48633, "loss_bbox": 0.05308, "loss": 0.0998, "grad_norm": 1.36515, "time": 0.22031}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.0005, "memory": 3286, "data_time": 0.00569, "loss_rpn_cls": 0.00298, "loss_rpn_bbox": 0.00778, "loss_cls": 0.03868, "acc": 98.48633, "loss_bbox": 0.05142, "loss": 0.10086, "grad_norm": 1.3637, "time": 0.17845}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.0005, "memory": 3286, "data_time": 0.00477, "loss_rpn_cls": 0.00218, "loss_rpn_bbox": 0.0068, "loss_cls": 0.03995, "acc": 98.44922, "loss_bbox": 0.05078, "loss": 0.09971, "grad_norm": 1.30729, "time": 0.17404}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.0005, "memory": 3286, "data_time": 0.00503, "loss_rpn_cls": 0.00256, "loss_rpn_bbox": 0.0073, "loss_cls": 0.03786, "acc": 98.51758, "loss_bbox": 0.04267, "loss": 0.09039, "grad_norm": 1.17037, "time": 0.17617}
{"mode": "train", "epoch": 10, "iter": 250, "lr": 0.0005, "memory": 3286, "data_time": 0.00505, "loss_rpn_cls": 0.00229, "loss_rpn_bbox": 0.01016, "loss_cls": 0.04089, "acc": 98.35938, "loss_bbox": 0.05773, "loss": 0.11108, "grad_norm": 1.443, "time": 0.17557}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.0005, "memory": 3286, "data_time": 0.05196, "loss_rpn_cls": 0.0017, "loss_rpn_bbox": 0.00649, "loss_cls": 0.03518, "acc": 98.58789, "loss_bbox": 0.04987, "loss": 0.09325, "grad_norm": 1.30596, "time": 0.2235}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.0005, "memory": 3286, "data_time": 0.00513, "loss_rpn_cls": 0.00239, "loss_rpn_bbox": 0.00727, "loss_cls": 0.03749, "acc": 98.50195, "loss_bbox": 0.04758, "loss": 0.09473, "grad_norm": 1.34012, "time": 0.17602}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.0005, "memory": 3286, "data_time": 0.00468, "loss_rpn_cls": 0.0022, "loss_rpn_bbox": 0.00633, "loss_cls": 0.03733, "acc": 98.48828, "loss_bbox": 0.04776, "loss": 0.09363, "grad_norm": 1.27369, "time": 0.17492}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.0005, "memory": 3286, "data_time": 0.00513, "loss_rpn_cls": 0.00198, "loss_rpn_bbox": 0.00688, "loss_cls": 0.03599, "acc": 98.59375, "loss_bbox": 0.04137, "loss": 0.08623, "grad_norm": 1.16151, "time": 0.17425}
{"mode": "train", "epoch": 11, "iter": 250, "lr": 0.0005, "memory": 3286, "data_time": 0.00466, "loss_rpn_cls": 0.00197, "loss_rpn_bbox": 0.00966, "loss_cls": 0.0392, "acc": 98.44922, "loss_bbox": 0.05496, "loss": 0.10579, "grad_norm": 1.41889, "time": 0.17602}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 5e-05, "memory": 3286, "data_time": 0.04978, "loss_rpn_cls": 0.00212, "loss_rpn_bbox": 0.00621, "loss_cls": 0.03588, "acc": 98.5918, "loss_bbox": 0.04662, "loss": 0.09083, "grad_norm": 1.30163, "time": 0.21977}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 5e-05, "memory": 3286, "data_time": 0.00484, "loss_rpn_cls": 0.00224, "loss_rpn_bbox": 0.00681, "loss_cls": 0.03874, "acc": 98.45117, "loss_bbox": 0.0463, "loss": 0.09408, "grad_norm": 1.34088, "time": 0.17523}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 5e-05, "memory": 3286, "data_time": 0.00474, "loss_rpn_cls": 0.00196, "loss_rpn_bbox": 0.00597, "loss_cls": 0.03433, "acc": 98.5957, "loss_bbox": 0.0451, "loss": 0.08736, "grad_norm": 1.21214, "time": 0.17409}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 5e-05, "memory": 3286, "data_time": 0.00447, "loss_rpn_cls": 0.00195, "loss_rpn_bbox": 0.00642, "loss_cls": 0.03562, "acc": 98.58398, "loss_bbox": 0.04039, "loss": 0.08438, "grad_norm": 1.17333, "time": 0.17326}
{"mode": "train", "epoch": 12, "iter": 250, "lr": 5e-05, "memory": 3286, "data_time": 0.00475, "loss_rpn_cls": 0.00219, "loss_rpn_bbox": 0.00896, "loss_cls": 0.03936, "acc": 98.49023, "loss_bbox": 0.05076, "loss": 0.10127, "grad_norm": 1.28694, "time": 0.17284}
